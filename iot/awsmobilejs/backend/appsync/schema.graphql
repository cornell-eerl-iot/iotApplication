type Appliance
{
title: String!
powerUsage: Float!
}

input ApplianceInput
{
title: String!
powerUsage: Float!}

input CreateIotDataInput
{
userId: String!
powerSeries: [PowerInput]!
devices: [ApplianceInput]!}

input DeleteIotDataInput
{
userId: String!}

type Mutation
{
createIotData(input: CreateIotDataInput! ): iotData
updateIotData(input: UpdateIotDataInput! ): iotData
deleteIotData(input: DeleteIotDataInput! ): iotData
}

type Power
{
time: String!
power: Float!
}

input PowerInput
{
time: String!
power: Float!}

type Query
{
getIotData(userId: String! ): iotData
listIotData(filter: TableIotDataFilterInput,limit: Int,nextToken: String ): iotDataConnection
}

type Subscription
{
onCreateIotData(userId: String ): iotData
@aws_subscribe(mutations: ["createIotData"])
onUpdateIotData(userId: String ): iotData
@aws_subscribe(mutations: ["updateIotData"])
onDeleteIotData(userId: String ): iotData
@aws_subscribe(mutations: ["deleteIotData"])
}

input TableBooleanFilterInput
{
ne: Boolean
eq: Boolean}

input TableFloatFilterInput
{
ne: Float
eq: Float
le: Float
lt: Float
ge: Float
gt: Float
contains: Float
notContains: Float
between: [Float]}

input TableIDFilterInput
{
ne: ID
eq: ID
le: ID
lt: ID
ge: ID
gt: ID
contains: ID
notContains: ID
between: [ID]
beginsWith: ID}

input TableIntFilterInput
{
ne: Int
eq: Int
le: Int
lt: Int
ge: Int
gt: Int
contains: Int
notContains: Int
between: [Int]}

input TableIotDataFilterInput
{
userId: TableStringFilterInput}

input TableStringFilterInput
{
ne: String
eq: String
le: String
lt: String
ge: String
gt: String
contains: String
notContains: String
between: [String]
beginsWith: String}

input UpdateIotDataInput
{
userId: String!}

type iotData
{
userId: String!
devices: [Appliance!]!
powerSeries: [Power!]!
}

type iotDataConnection
{
items: [iotData]
nextToken: String
}
